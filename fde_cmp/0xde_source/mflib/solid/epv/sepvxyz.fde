\ --------------------------- Visco-elastic-plastic equation ------------------------------------
\            s(n+1) = s(n) + ds(n)
\ where
\      ds(n) = D*de_e(n) = D*(de(n) - de_p(n) - de_v(n)) 
\            = D*(de(n)-dlambda*df/ds - inv(Q)*(s(n)+ds(n))*dt)           (1)
\      de      denotes the increment of strain e;
\      de_e    denotes the elastic part of de;
\      de_p    denotes the plastic part of de;
\      de_v    denotes the viscous part of de.
\ Refer to displacement FDE files (depxy.fde, depxyd.fde, or depxyz.fde) 
\       for more information regarding the meaning of each term in the above equation.
\ Rearranging the above equation:
\            ds(n) = D_bar*(de(n) - dlambda*df/ds - inv(Q)*s(n)*dt)
\ where D_bar = inv(inv(D) + inv(Q)*dt)
\ substituting dlambda = (df/ds*D_bar*de - df/ds*D_bar*inv(Q)*ds(n)*dt + fn)/A into (1):
\            ds(n) = D_bar*de_e(n)
\                  = D_bar*(de(n) - (df/ds*D_bar*de - df/ds*D_bar*inv(Q)*ds(n)*dt 
                     + fn)/A*df/ds - inv(Q)*(s(n)+ds(n))*dt)              (2)
\ where A = df/ds*D_bar*df/ds - df/dq*m
\ equation (2) can be simplified as:
\            ds = D*de
\ ---------------------------------- PDE in weak form ------------------------------------------
\            (ds;ds) = (D*de;ds)
\ where 
\      the 1st ds denotes the increment of s;
\      the 2nd ds denotes the variation of s.
\ ----------------------------------------------------------------------------------------------
DISP sxx syy szz syz sxz sxy sq did
COOR x y z
COEF un vn wn
COMMON extern double *inelm%1%2;
VECT s sxx syy szz syz sxz sxy
VECT ddfv ddf[1] ddf[2] ddf[3]
VECT ddfp ddf[4] ddf[5] ddf[6]
VECT ddgv ddg[1] ddg[2] ddg[3]
VECT ddgp ddg[4] ddg[5] ddg[6]
VECT uk sq did
VECT fk str[7] eid
VECT str str[1] str[2] str[3] str[4] str[5] str[6]
VECT strv str[1] str[2] str[3]
VECT strp str[4] str[5] str[6]
VECT dsv ds[1] ds[2] ds[3]
VECT dsp ds[4] ds[5] ds[6]
SHAP %1 %2
GAUS %3
$CC double pe,pv,fx,fy,fz,rou,alpha,t0,time1,a,b,prag,dln,shearqrev,factqrev,eid,cv,cp,epp,eyp,wpp;
$CC double vi,qnn,shearwave;
$CC int kq,ntime,ialpha;
$CC extern double getyield(double *,double *,double *,double,double *,
$CC int,double (*f)(),int);
$CC extern double %4(double *,double *);
MASS %1 vol
ARRAY dev[3],dep[3],ds[6],dspv[3],dspp[3],dpv[3]),dpp[3],^e[3][3],^d[3][3],^dsv1[3][3],^qrev[3][3],^dwave[3][3]
$CC double ddf[8],ddg[8],str[8],p[5];
@L singular.xyz n
MATE pe pv vi fx fy fz p[1] p[2] p[4] qnn rou alpha \
1.0e010;0.3;1.0e020;0.;0.;0.;0.2;1000.;0.0;3;3000.;0.6;
$CC t0 = 0.0;
$CC ntime=(tmax-t0)/dt;
$CC time1=time_now/ntime;
$CC kq=qnn+0.5;
$CC p[3]=pv;
MATRIX sm 3 3
(1.-pv) pv pv
pv (1.-pv) pv
pv pv (1.-pv)

MATRIX qrevm 3 3
1./3.0 -1./6.0 -1./6.0
-1./6.0 1./3.0 -1./6.0
-1./6.0 -1./6.0 1./3.0


STIF
$CC fact=pe/(1.0+pv)/(1.0-2.0*pv);
$CC shear=(0.5-pv)*fact;
$CV ^d_i_j=+sm_i_j*fact
$CC factqrev=1/vi;
$CC shearqrev=factqrev;
$CV ^qrev_i_j=qrevm_i_j*factqrev
$CC det=invm(3,d,e);
$CV ^d_i_j = ^e_i_j
$CV ^dwave_i_j=+^d_i_j+^qrev_i_j*dt
$CC shearwave=1/shear+shearqrev*dt;
$CC det=invm(3,dwave,d);
$CC shearwave=1/shearwave;
$CC shear=shearwave;
@L vol.xyz n
$CC j = (num-1)*ngaus*7+(igaus-1)*7;
$CC for (i=1; i<=7; ++i) str[i]=inelm%1%2[j+i];
@L gradv.xyz m ^e x y z un vn wn
$CV dev_i=^e_i_i
$CC dep[1] = ^e[2][3]+^e[3][2];
$CC dep[2] = ^e[1][3]+^e[3][1];
$CC dep[3] = ^e[1][2]+^e[2][1];
$CV dsv_i=+^d_i_j*dev_j
$CV dsp_i=shear*dep_i
$CC ialpha=0;
$CC a=getyield(p,str,d,shear,ddf,kq,%4,ialpha);
$CC prag=%4(p,str);
$CC dln=ddf[1]*dev[1]+ddf[2]*dev[2]+ddf[3]*dev[3]
$CC +ddf[4]*dep[1]+ddf[5]*dep[2]+ddf[6]*dep[3]+prag;
$CV str_i=+str_i+ds_i
$CC if (dln>0.0) {
$CC  b=1.0/a;
$CC  eid=-1.0;
$CV dsv_i=+b*ddgv_i*ddfv_j*dev_j
$CV dsp_i=+b*ddgp_i*ddfp_i*dep_i
$CV strv_i=+strv_i-dsv_i-ddgv_i*prag*b
$CV strp_i=+strp_i-dsp_i-ddgp_i*prag*b
$CC } else {
$CC  b=0.0;
$CC  eid=1.0;
$CC }
$CV ^dsv1_i_k=+^d_i_j*^qrev_j_k
$CV dsv_i=+^dsv1_i_k*strv_k*dt
$CV dsp_i=+shear*shearqrev*strp_i*dt
$CV str_i=+str_i+ds_i
$CC a=getyield(p,str,d,shear,ddf,kq,%4,ialpha);
$CV cv=+ddfv_i*dev_i
$CV cp=+ddfp_i*dep_i
$CV dspv_i=ddgv_i*(cv+cp)*b
$CV dspp_i=ddgp_i*(cv+cp)*b
$CC det=invm(3,d,e);
$CV ^d_i_j = ^e_i_j
$CV dpv_i=+^d_i_j*dspv_j
$CV dpp_i=dspp_i/shear
$CC switch (kq)
$CC {
$CC case 2:
$CV epp=+dpv_i
$CC str[7]=epp+str[7];
$CC  break;
$CC case 3:
$CV eyp=+dpv_i*dpv_i+dpp_i*dpp_i
$CC str[7]=sqrt(eyp)+str[7];
$CC  break;
$CC default:
$CV wpp=+dpv_i*strv_i+dpp_i*strp_i
$CC str[7]=wpp+str[7];
$CC  break;
$CC }
$CC j = (num-1)*ngaus*7+(igaus-1)*7;
$CC for (i=1; i<=7; ++i) inelm%1%2[j+i]=str[i];
DIST=+[sxx;sxx]*0.0

LOAD=+[s_i]*str_i*vol+[uk_i]*fk_i*vol

END
