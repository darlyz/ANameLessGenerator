ch4c8g2
defi
disp u,v,w,
var u1 v1 w1 u2 v2 w2 u3 v3 w3 u4
var v4 w4 u5 v5 w5 u6 v6 w6 u7 v7
var w7 u8 v8 w8
refc rx,ry,rz,
coor x,y,z,
func = exx,eyy,ezz,eyz,exz,exy,
dord 1,1,1,
node 8
COMMON double ^inelmc8[nelem][m];
$cc double pe,pv,fx,fy,fz,rou,alpha,yita,csp,str[7];
$cc double ^d[3][3],^rq[3][3],snv[4],ssv[4];
$cc static int init=0;
$cc int m;
$I
$cc m = ngaus*6;
$cc if (init==0) {
$cc inelmc8 = (double *) calloc(nelem*m,sizeof(double));
$cc for (i=0; i<nelem*m; ++i) inelmc8[i]=0.0;
$cc init = 1; }
mate pe pv fx fy fz rou alpha yita 1.0e10 0.3 0.0 0.0 0.0 3000.0 0.6 1.0e23
$cc ^rq[1][1]=1./3./yita;
$cc ^rq[1][2]=(-1./6.)/yita;
$cc ^rq[1][3]=(-1./6.)/yita;
$cc ^rq[2][1]=(-1./6.)/yita;
$cc ^rq[2][2]=1./3./yita;
$cc ^rq[2][3]=(-1./6.)/yita;
$cc ^rq[3][1]=(-1./6.)/yita;
$cc ^rq[3][2]=(-1./6.)/yita;
$cc ^rq[3][3]=1./3./yita;

shap
u=
u1 = (1.-rx)/2*(1.-ry)/2*(1.-rz)/2
u2 = (1.+rx)/2*(1.-ry)/2*(1.-rz)/2
u3 = (1.+rx)/2*(1.+ry)/2*(1.-rz)/2
u4 = (1.-rx)/2*(1.+ry)/2*(1.-rz)/2
u5 = (1.-rx)/2*(1.-ry)/2*(1.+rz)/2
u6 = (1.+rx)/2*(1.-ry)/2*(1.+rz)/2
u7 = (1.+rx)/2*(1.+ry)/2*(1.+rz)/2
u8 = (1.-rx)/2*(1.+ry)/2*(1.+rz)/2

v=
v1 = (1.-rx)/2*(1.-ry)/2*(1.-rz)/2
v2 = (1.+rx)/2*(1.-ry)/2*(1.-rz)/2
v3 = (1.+rx)/2*(1.+ry)/2*(1.-rz)/2
v4 = (1.-rx)/2*(1.+ry)/2*(1.-rz)/2
v5 = (1.-rx)/2*(1.-ry)/2*(1.+rz)/2
v6 = (1.+rx)/2*(1.-ry)/2*(1.+rz)/2
v7 = (1.+rx)/2*(1.+ry)/2*(1.+rz)/2
v8 = (1.-rx)/2*(1.+ry)/2*(1.+rz)/2

w=
w1 = (1.-rx)/2*(1.-ry)/2*(1.-rz)/2
w2 = (1.+rx)/2*(1.-ry)/2*(1.-rz)/2
w3 = (1.+rx)/2*(1.+ry)/2*(1.-rz)/2
w4 = (1.-rx)/2*(1.+ry)/2*(1.-rz)/2
w5 = (1.-rx)/2*(1.-ry)/2*(1.+rz)/2
w6 = (1.+rx)/2*(1.-ry)/2*(1.+rz)/2
w7 = (1.+rx)/2*(1.+ry)/2*(1.+rz)/2
w8 = (1.-rx)/2*(1.+ry)/2*(1.+rz)/2

tran
x=
x(1) = (1.-rx)/2*(1.-ry)/2*(1.-rz)/2
x(2) = (1.+rx)/2*(1.-ry)/2*(1.-rz)/2
x(3) = (1.+rx)/2*(1.+ry)/2*(1.-rz)/2
x(4) = (1.-rx)/2*(1.+ry)/2*(1.-rz)/2
x(5) = (1.-rx)/2*(1.-ry)/2*(1.+rz)/2
x(6) = (1.+rx)/2*(1.-ry)/2*(1.+rz)/2
x(7) = (1.+rx)/2*(1.+ry)/2*(1.+rz)/2
x(8) = (1.-rx)/2*(1.+ry)/2*(1.+rz)/2

y=
y(1) = (1.-rx)/2*(1.-ry)/2*(1.-rz)/2
y(2) = (1.+rx)/2*(1.-ry)/2*(1.-rz)/2
y(3) = (1.+rx)/2*(1.+ry)/2*(1.-rz)/2
y(4) = (1.-rx)/2*(1.+ry)/2*(1.-rz)/2
y(5) = (1.-rx)/2*(1.-ry)/2*(1.+rz)/2
y(6) = (1.+rx)/2*(1.-ry)/2*(1.+rz)/2
y(7) = (1.+rx)/2*(1.+ry)/2*(1.+rz)/2
y(8) = (1.-rx)/2*(1.+ry)/2*(1.+rz)/2

z=
z(1) = (1.-rx)/2*(1.-ry)/2*(1.-rz)/2
z(2) = (1.+rx)/2*(1.-ry)/2*(1.-rz)/2
z(3) = (1.+rx)/2*(1.+ry)/2*(1.-rz)/2
z(4) = (1.-rx)/2*(1.+ry)/2*(1.-rz)/2
z(5) = (1.-rx)/2*(1.-ry)/2*(1.+rz)/2
z(6) = (1.+rx)/2*(1.-ry)/2*(1.+rz)/2
z(7) = (1.+rx)/2*(1.+ry)/2*(1.+rz)/2
z(8) = (1.-rx)/2*(1.+ry)/2*(1.+rz)/2

gaus = 8
 0.577350269189626  0.577350269189626  0.577350269189626 1.0
 0.577350269189626  0.577350269189626 -0.577350269189626 1.0
 0.577350269189626 -0.577350269189626  0.577350269189626 1.0
 0.577350269189626 -0.577350269189626 -0.577350269189626 1.0
-0.577350269189626  0.577350269189626  0.577350269189626 1.0
-0.577350269189626  0.577350269189626 -0.577350269189626 1.0
-0.577350269189626 -0.577350269189626  0.577350269189626 1.0
-0.577350269189626 -0.577350269189626 -0.577350269189626 1.0

func
$CC vol = 1.0;
$cc fact = pe/(1.+pv)/(1.-2.*pv);
$cc shear = (0.5-pv)*fact;
$cc j = (igaus-1)*6;
$cc for (i=1; i<=6; ++i) str[i]=^inelmc8[num][j+i];
$cc ^d[1][1]=(1.-pv)*fact;
$cc ^d[1][2]=pv*fact;
$cc ^d[1][3]=pv*fact;
$cc ^d[2][1]=pv*fact;
$cc ^d[2][2]=(1.-pv)*fact;
$cc ^d[2][3]=pv*fact;
$cc ^d[3][1]=pv*fact;
$cc ^d[3][2]=pv*fact;
$cc ^d[3][3]=(1.-pv)*fact;
$cc snv[1]=+^rq[1][1]*str[1]+^rq[1][2]*str[2]+^rq[1][3]*str[3];
$cc snv[2]=+^rq[2][1]*str[1]+^rq[2][2]*str[2]+^rq[2][3]*str[3];
$cc snv[3]=+^rq[3][1]*str[1]+^rq[3][2]*str[2]+^rq[3][3]*str[3];
$cc ssv[1]=+^d[1][1]*snv[1]+^d[1][2]*snv[2]+^d[1][3]*snv[3];
$cc ssv[2]=+^d[2][1]*snv[1]+^d[2][2]*snv[2]+^d[2][3]*snv[3];
$cc ssv[3]=+^d[3][1]*snv[1]+^d[3][2]*snv[2]+^d[3][3]*snv[3];
$cc ssv[1]=ssv[1]*dt-str[1];
$cc ssv[2]=ssv[2]*dt-str[2];
$cc ssv[3]=ssv[3]*dt-str[3];
$cc csp=shear/yita*dt-1.0;
exx=+[u/x]

eyy=+[v/y]

ezz=+[w/z]

eyz=+[v/z]+[w/y]

exz=+[u/z]+[w/x]

exy=+[u/y]+[v/x]


stif
dist=+[exx;exx]*^d[1][1]*vol
+[exx;eyy]*^d[1][2]*vol
+[exx;ezz]*^d[1][3]*vol
+[eyy;exx]*^d[2][1]*vol
+[eyy;eyy]*^d[2][2]*vol
+[eyy;ezz]*^d[2][3]*vol
+[ezz;exx]*^d[3][1]*vol
+[ezz;eyy]*^d[3][2]*vol
+[ezz;ezz]*^d[3][3]*vol
+[eyz;eyz]*shear*vol
+[exz;exz]*shear*vol
+[exy;exy]*shear*vol

load
load=+[u]*fx*vol
+[v]*fy*vol
+[w]*fz*vol
+[exx]*ssv[1]
+[eyy]*ssv[2]
+[ezz]*ssv[3]
+[eyz]*csp*str[4]*vol
+[exz]*csp*str[5]*vol
+[exy]*csp*str[6]*vol

end